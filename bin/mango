#!/usr/bin/env node
require('v8-compile-cache')

const argv = require('yargs')
const checkError = require('../lib/helpers/checkerror')
const Config = require('../lib/helpers/config')
const log = require('better-console')
const Mango = require('../lib/mango')
const path = require('path')
const pkg = require('../package.json')
const runcmd = require('../lib/helpers/runcmd')
const unique = require('../lib/helpers/unique')

argv
	.command('init [directory]', 'initialize a new project', {
		source: {
			alias: 's',
			describe: 'Template repository to fork. Defaults to ' + pkg.config.default_fork_repo,
			default: pkg.config.default_fork_repo,
		}
	}, async function init(argv) {
		const dir = path.resolve(process.cwd(), argv.directory || '.')
		const mango = new Mango(dir)
		const source = argv.source || pkg.config.default_fork_repo
		log.time('~ initialization time')

		mango.init(source, async function(err) {
			log.timeEnd('~ initialization time')
			checkError(err)

			const config = await (new Config(dir)).get()
			if(config.hooks && config.hooks.init) {
				log.info('~ init hook: ' + config.hooks.init)
				runcmd(config.hooks.init, dir, function() {
					log.info('/>')
				})
			} else {
				log.info('/>')
			}
		})
	})


	.command(['install [packages..]', 'i'], 'NPM install of passed packages or dependencies specified in config', {
	}, async function install(argv) {
		const packages = argv.packages
		const dir = process.cwd()
		const config = new Config()
		const mainconfig = await config.get(true)
		const fullconfig = await config.get()

		const onFinish = function() {
			log.timeEnd('~ installation time')
			if(fullconfig.hooks && fullconfig.hooks.install) {
				log.info('~ install hook: ' + fullconfig.hooks.install)
				runcmd(fullconfig.hooks.install, null, function() {
					log.info('/>')
				})
			} else {
				log.info('/>')
			}
		}

		const doInstall = function() {
			log.time('~ installation time')
			// Install only passed packages and update mango.json
			if(packages.length > 0) {
				var _config = { dependencies: packages }
				var mango = new Mango(dir, _config)

				mango.install(function(err) {
					checkError(err)
					if(!mainconfig.dependencies) mainconfig.dependencies = []
					mainconfig.dependencies = unique(mainconfig.dependencies.concat(packages))
					config.save(mainconfig)
					onFinish()
				})
			}
			// Install packages specifies in mango.json
			else {
				const mango = new Mango(dir, fullconfig)
				mango.install(function(err) {
					checkError(err)
					onFinish()
				})
			}
		}


		// Run preinstall hook first
		if(fullconfig.hooks && fullconfig.hooks.preinstall) {
			log.info('~ preinstall hook: ' + fullconfig.hooks.preinstall)
			runcmd(fullconfig.hooks.preinstall, null, doInstall)
		}
		// Run immediately
		else {
			doInstall()
		}

	})


	.command(['build [tasks...]', 'b'], 'build project assets for production', {
		customConfig: {
			alias: 'c',
			describe: 'Read the config from custom file',
		},
		reuseBuildstamp: {
			alias: 'rb',
			describe: 'Reuse buildstamp from previous build',
			boolean: true,
		},
		blacklistTasks: {
			alias: 'bl',
			describe: 'Tasks not to run',
			default: '',
		},
	}, async function build(argv) {
		const tasks = argv.tasks
		const blacklistTasks = argv.blacklistTasks.split(',')
		const config = await (new Config(null, argv.customConfig)).get(false, argv.reuseBuildstamp)
		const mango = new Mango(process.cwd(), config)

		log.log('mango-cli v' + pkg.version)

		var doBuild = function() {
			log.time('~ compilation time')
			mango.build(tasks, blacklistTasks, function(err) {
				log.timeEnd('~ compilation time')
				checkError(err)
				if(config.hooks && config.hooks.build) {
					log.info('~ build hook: ' + config.hooks.build)
					runcmd(config.hooks.build, null, function() {
						log.info('/>')
					})
				} else {
					log.info('/>')
				}
			})
		}

		// Run prebuild hook first
		if(config.hooks && config.hooks.prebuild) {
			log.info('~ prebuild hook: ' + config.hooks.prebuild)
			runcmd(config.hooks.prebuild, null, doBuild)
		}
		// Run immediately
		else {
			doBuild()
		}

	})


	.command(['dev', 'd'], 'start a development mode and watch for assets change', {
		proxy: {
			alias: 'p',
			describe: 'Proxy to a server instead of starting built-in',
		}
	}, async function (argv) {
		const config = await (new Config()).get()
		const mango = new Mango(process.cwd(), config)

		log.log('mango-cli v' + pkg.version)

		const doDev = function() {
			mango.dev(argv.proxy, function(err) {
				checkError(err)
				if(config.hooks && config.hooks.dev) {
					log.info('~ dev hook: ' + config.hooks.dev)
					runcmd(config.hooks.dev, null, function() {
						log.info('/>')
					})
				} else {
					log.info('/>')
				}
			})
		}

		// Run predev hook first
		if(config.hooks && config.hooks.predev) {
			log.info('~ predev hook: ' + config.hooks.predev)
			runcmd(config.hooks.predev, null, doDev)
		}
		// Run immediately
		else {
			doDev()
		}

	})

	.demandCommand(1)
	.help()
	.argv

